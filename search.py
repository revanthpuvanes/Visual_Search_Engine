# -*- coding: utf-8 -*-
"""search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLGfKD0CvLILDuHWvCTeUv3LFnN8iNXb
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
#import pathlib
from keras.preprocessing import image
from keras.applications.vgg16 import VGG16, preprocess_input
from keras.models import Model
#from pathlib import Path
from PIL import Image
import matplotlib.pyplot as plt
#from tqdm import tqdm_notebook as tqdm
import pandas as pd
from keras.preprocessing.image import ImageDataGenerator, load_img
#import random
import os
import cv2
#from google.colab import data_table


class FeatureExtractor:

    def __init__(self):

        # Use VGG-16 as the architecture and ImageNet for the weight
        base_model = VGG16(weights='imagenet')
        # Customize the model to return features from fully-connected layer
        self.model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)

    def extract(self, img):

        #img = load_img(('\static\uploads,img_name), target_size=(224, 224))
        # Resize the image
        img = img.resize((224, 224))
        # Convert the image color space
        img = img.convert('RGB')
        # Reformat the image
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        # Extract Features
        feature = self.model.predict(x)[0]

        return feature / np.linalg.norm(feature)

###########################
###########################

fe = FeatureExtractor()

###########################
###########################

# def feature_scores(query):
#   features = pd.read_csv('./features/feature_extraction.csv')
#   #id = pd.read_csv('./features/product_id.csv')

#   features_data = features.copy()
#   features_data = features_data.drop(columns = ['image'])
#   features_data = features_data.values
#   dists = np.linalg.norm(features_data - query, axis=1)

# Extract images that have lowest distance
  # ids = np.argsort(dists)[:1]
  # lookalike_imgs = features.iloc[ids,:]['image']

  # img1 = cv2.imread('/content/drive/MyDrive/images/image/'+str(lookalike_imgs))
  # img2 = cv2.imread('./static/uploads/t.jpg')

  # dif1 = cv2.calcHist([img1],[0],None,[256],[0,256])
  # dif2 = cv2.calcHist([img2],[0],None,[256],[0,256])

  # res = cv2.compareHist(dif1, dif2, cv2.HISTCMP_BHATTACHARYYA)
  # threshold = 0.6

  # #print(res)

  # if res <= threshold:
  # return lookalike_imgs

  #   sift = cv2.xfeatures2d.SIFT_create()

  #   kp1, des1 = sift.detectAndCompute(img1,None)
  #   kp2, des2 = sift.detectAndCompute(img2,None)
  #     # print(kp1)
  #     # print(des1)
  #     # BF(brute force)Matcher with default params
  #   bf = cv2.BFMatcher()
  #   matches = bf.knnMatch(des1,des2, k=2)
  #     #print(matches)
  #     # Apply ratio test
  #   good = []
  #   for m,n in matches:
  #       if m.distance < 0.5*n.distance:
  #           good.append([m])

  #   img3 = cv2.drawMatchesKnn(img1,kp1,img2,kp2,good,None,flags=2)
  #   value = lookalike_imgs

# def product_id(query):
#   features = pd.read_csv('./features/feature_extraction.csv')
#   id = pd.read_csv('./features/product_id.csv')

#   features_data = features.copy()
#   features_data = features_data.drop(columns = ['image'])
#   features_data = features_data.values
#   dists = np.linalg.norm(features_data - query, axis=1)

# # Extract images that have lowest distance
#   ids = np.argsort(dists)[:1]
#   product_id = id.iloc[ids,:]['id']

#   return product_id




def feature_scores(query):

  features = pd.read_csv('./features/feature_extraction.csv')
  id = pd.read_csv('./features/product_id.csv')

  features_data = features.copy()
  features_data = features_data.drop(columns = ['image'])
  features_data = features_data.values
  dists = np.linalg.norm(features_data - query, axis=1)

# Extract images that have lowest distance
  ids = np.argsort(dists)[:1]
  lookalike_imgs = features.iloc[ids,:]['image']
  product_id = id.iloc[ids,:]['id']

  return lookalike_imgs, product_id



def feature_scores_1(query):

  features = pd.read_csv('./features/feature_extraction.csv')
  id = pd.read_csv('./features/product_id.csv')

  features_data = features.copy()
  features_data = features_data.drop(columns = ['image'])
  features_data = features_data.values
  dists = np.linalg.norm(features_data - query, axis=1)

# Extract images that have lowest distance
  ids = np.argsort(dists)[1:4]
  lookalike_imgs = features.iloc[ids,:]['image']
  product_id = id.iloc[ids,:]['id']

  return lookalike_imgs, product_id



def feature_scores_2(query):
  
  features = pd.read_csv('./features/feature_extraction.csv')
  id = pd.read_csv('./features/product_id.csv')

  features_data = features.copy()
  features_data = features_data.drop(columns = ['image'])
  features_data = features_data.values
  dists = np.linalg.norm(features_data - query, axis=1)

# Extract images that have lowest distance
  ids = np.argsort(dists)[1:4]
  lookalike_imgs = features.iloc[ids,:]['image']
  product_id = id.iloc[ids,:]['id']

  return lookalike_imgs, product_id

